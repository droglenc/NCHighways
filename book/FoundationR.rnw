<<echo=FALSE, cache=FALSE, results='hide'>>=
set_parent('IntroStats.Rnw')
@

\chapter{Getting Started with R} \label{chap:FoundationsR}
\begin{ChapObj}{\boxwidth}
  \textbf{Chapter Objectives:}
  \begin{Enumerate}
    \item Understand the difference between R expressions and assignments.
    \item Understand the different types of data that can be stored in R.
    \item Understand the different types of data structures used in R.
    \item Be able to enter data into R data frames.
    \item Be able to isolate individual variables and individuals in R.
    \item Be able to create data frames that are subsets of larger data frames.
    \item Understand how homework assignments should be formatted.
  \end{Enumerate}
\end{ChapObj}

\minitoc
\newpage


\section{Setting Up R and Helpers} \label{sect:RSetup}
You will need a working R (version 3.1.1 or more recent), \R{NCStats} package (version 0.4.3 or more recent), and RStudio (version 0.98.X or more recent) to efficiently perform the analyses described in this and subsequent chapters.  Methods for downloading, installing, and configuring R, RStudio, and NCStats are described in detail below.

\subsection{Install R}
\begin{enumerate}
  \item Go to the RStudio CRAN mirror (at \href{http://cran.rstudio.edu/}{cran.rstudio.edu/}) in order to select the appropriate operating system for your computer\footnote{You can select a different mirror by going to \href{http://www.r-project.org/}{the R homepage}, selecting the ``download R'' link in the ``Getting Started'' box and selecting a mirror location from the ensuing page.}.  The remainder of these steps will illustrate the installation of R for the WINDOWS environment.
\begin{center}
  \includegraphics[width=4in]{Figs/InstallR_ChooseOS.png}
\end{center}

  \item Select the ``base'' option.
\begin{center}
  \includegraphics[width=4in]{Figs/InstallR_ChooseBase.png}
\end{center}

  \item Select the ``Download R 3.1.1 for Windows'' option (or whatever the latest version is).  Make sure to note where this executable program is saved on your computer.
\begin{center}
  \includegraphics[width=4in]{Figs/InstallR_Download.png}
\end{center}

  \item Locate and run the downloaded file (called ``R-3.1.1-win.exe'' or similar if the version number has changed).  Select ``English'' language in the first dialog box (depending on your operating system you may have received security warnings before this dialog box appears).

  \item Press ``Next'' on the next two dialog boxes (the first is a simple description and the second is a user agreement).

  \item Select a location to install R (simply use the default location if the location is not important to you -- in the dialog box below I installed in a custom directory).  Press ``Next.''
\begin{center}
  \includegraphics[width=2.5in]{Figs/InstallR_Directory.png}
\end{center}

  \item At this point you can choose to install 32- or 64-bit or both versions of R.  If you don't have a 64-bit computer then, obviously, you must install the 32-bit version.  If you do have a 64-bit computer, I suggest, initially and for simplicity, installing one version or the other.  I usually install the 32-bit version as it has some slight advantages when not working with extremely large data sets and with other software I have installed on my machine (see this \href{http://streaming.stat.iastate.edu/CRAN/bin/windows/base/rw-FAQ.html#Should-I-run-32_002dbit-or-64_002dbit-R_003f}{R FAQ}).  In this demonstration, I will install only the 32-bit version of R (and the Core Files).  Press ``Next.''
\begin{center}
  \includegraphics[width=2.5in]{Figs/InstallR_32Bit.png}
\end{center}

  \item Select the ``No (accept defaults)'' (this is the default) option.  Press ``Next.''

  \item Decide whether or not to create a Start Menu folder.  Press ``Next.''

  \item Decide whether or not to create desktop or Quick Launch icons (top two choices) and whether to register the version number and associate .RData files with R (bottom two choices).  Generally, you will want to register the version number and associate the .RData files with R.  Press ``Next.''
\begin{center}
  \includegraphics[width=2.5in]{Figs/InstallR_Options1.png}
\end{center}

  \item R should then begin installing files into the directory you chose previously.  If everything goes well then you should get one last dialog box noting such.  Press ``Finish.''
\begin{center}
  \includegraphics[width=2.5in]{Figs/InstallR_Finish.png}
\end{center}
\end{enumerate}


\subsection{Install RStudio}
\begin{enumerate}
  \item Go to the R Studio homepage at \href{http://www.rstudio.com/}{www.rstudio.com/}.  Press ``Download RStudio'' button/graphic.
\begin{center}
  \includegraphics[width=4in]{Figs/InstallRStudio_Home.png}
\end{center}

  \item Press the ``DOWNLOAD RSTUDIO DESKTOP'' button/graphic (you need to scroll down the page some).
\begin{center}
  \includegraphics[width=4in]{Figs/InstallRStudio_Download.png}
\end{center}

  \item Select the link that corresponds to the operating system appropriate for your computer.  In the remainder of these directions I will demonstrate the installation for a WINDOWS operating system.  Make sure to note where this executable program is saved on your computer.
\begin{center}
  \includegraphics[width=4in]{Figs/InstallRStudio_ChooseOS.png}
\end{center}

  \item Locate and run the downloaded file (called ``RStudio-0.98.994.exe'' or similar if the version number has changed).  Press ``Next'' on the first dialog box (depending on your operating system you may have received security warnings before this dialog box appears).

  \item Select a location to install RStudio (simply use the default location if the location is not important to you -- in the dialog box below I installed in a custom directory).  Press ``Next.''
\begin{center}
  \includegraphics[width=2.5in]{Figs/InstallRStudio_Directory.png}
\end{center}

  \item Decide whether or not to create a shortcut in the Start Menu folder.  Press ``Install.''

  \item RStudio should then begin installing files into the directory you chose previously.  If everything goes well then you should get one last dialog box noting such.  Press ``Finish.''
\begin{center}
  \includegraphics[width=2.5in]{Figs/InstallRStudio_Finish.png}
\end{center}

\end{enumerate}


\subsection{Preparing RStudio}
\begin{enumerate}
  \item Open RStudio.

  \item Select the ``Tools'' menu and then the ``Global Options'' submenu.  In the ensuing dialog box select the ``General'' icon on the left (this should already be selected).  Confirm that the R version reads ``[Default][32-bit]'' followed by the path to the R program (as shown in the dialog box above).  If this does not appear, then select the ``Change...'' button and then select ``Use your machine's default version of R (32-bit).''\footnote{Of course, if you installed the 64-bit version of R then you may replace ``32-bit'' with ``64-bit'' in these instructions.}
\begin{center}
  \includegraphics[width=3in]{Figs/PrepRStudio_OptionsGeneral.png}
\end{center}

  \item Select the ``Packages'' icon in the ``options'' dialog box.  It is useful to set a CRAN mirror in this dialog box.  To do so, select the ``Change...'' button next to the box below ``CRAN mirror'' and select a location.  I have set my CRAN mirror to Michigan Tech University.
\begin{center}
  \includegraphics[width=3in]{Figs/PrepRStudio_OptionsCRAN.png}
\end{center}

\item Select the ``Code Editing'' icon in the ``Options'' dialog box.  I suggest, in addition to the default selections, selecting the ``Highlight selected line'', ``Show margin'', and ``Show syntax highlighting in console input.''
\begin{center}
  \includegraphics[width=3in]{Figs/PrepRStudio_OptionsCodeEditing.png}
\end{center}

  \item No other options need to be set for our purposes.  Press ``OK.''
\end{enumerate}



\subsection{Installing Needed R Packages}
\begin{enumerate}
  \item Open RStudio (if not already open).

  \item Open a new R script window by selecting the ``down arrow'' next to the ``New'' icon to the far left on the RStudio toolbar (directly under the ``File'' menu item).  In the ensuing list, choose ``R script'' (alternatively, \verb+<CTRL>+ + \verb+<Shift>+ + \verb+N+).  This will open a blank window in the upper-left pane of the RStudio window (below the toolbar, above the ``Console'' window).
\begin{center}
  \includegraphics[width=4in]{Figs/RStudio_NewScript.png}
\end{center}

  \item In the R script window, type the EXACT code shown in the window below.
\begin{center}
  \includegraphics[width=4.5in]{Figs/RStudio_SourceNCStats.png}
\end{center}

  \item While the cursor is still on the line just typed in RStudio, press the ``Run'' button near the far right of the ``R Script'' window toolbar.  This will ``send'' the R command you just typed to the Console window.  R should now download and install a number of extra packages that we will use throughout the course.  This will take a few minutes with a finish noted by an R prompt (a ``greater than'') symbol in the Console pane.  If R/RStudio seems to be ``sitting there'' then take note of the following two possibilities.
  \begin{itemize}
    \item R may say that a library directory is not writable and a dialog box will appear that will ask ``Would you like to use a personal library instead?''  You can choose ``Yes'' for this dialog box.  Also note that this dialog box may appear in the background.  If R seems to be ``waiting'' after saying that the directory is not writable, then look in your windows toolbar for an icon that represents the dialog box.
    \item If the CRAN mirror did not get set properly as discussed above, then R may ask you to choose a mirror.  You may be able to select a mirror with a separate dialog box (again look for this in the Windows toolbar) or with a text menu in the Console pane (in this case, click in the R console window and type the number corresponding to the CRAN mirror you wish to use (Michigan Tech is number 86)).
  \end{itemize}

  \item Type \R{library(NCStats)} into the R Script window and ``Run'' it by again selecting the ``Run'' icon.  The end of your Console pane should look like that below (the version number may be different).
\begin{center}
  \includegraphics[width=5in]{Figs/RStudio_LibraryNCStats.png}
\end{center}

  \item Type \R{?NCStats} into the R Script window and ``Run'' it by again selecting the ``Run'' icon.  A help page that looks like that shown below should now appear in the ``Help'' window in the lower-right corner of the RStudio window.  If this help page appears then the installation is complete and correct.
\begin{center}
  \includegraphics[width=4in]{Figs/RStudio_NCStatsHelp.png}
\end{center}
\end{enumerate}


\subsection{What is RStudio}
R is an open-source software environment for statistical computing and graphics that runs on Windows, Mac OS, and many UNIX platforms.  Unlike many other programs, users interact with R through the issuance of commands on a command line rather than through a graphical user interface.    While such an interface may be unusual for many users, it's primary strength is the ability for a user to develop scripts of commands to perform various analyses that can then be easily repeated.

RStudio is an open-source integrated development environment (IDE) that serves as a front-end ``on top'' of R that eases the user's interaction with R by providing some of the conveniences of a GUI and, more importantly, a means for efficiently constructing and running R scripts.  Among other conveniences, RStudio provides a four-panel layout that includes a feature-rich source-code editor (includes syntax highlighting, parentheses completion, spell-checking, etc.), a tight link to the R console, a system for examining objects saved in R, an interface to R help, and extended features to examine and save plots.  More information about RStudio can be found at \href{https://support.rstudio.com/hc/en-us/categories/200035113-Documentation}{support.rstudio.com/}.


\subsection{RStudio Design}
RStudio is organized around a four-panel layout \figrefp{fig:RStudioLayout}.  The upper-left panel is the R \emph{Script Editor}.  R commands will be typed in this panel and submitted to the R \emph{Console} in the lower-left panel.  For most applications, you will type R commands in the \emph{Script Editor} and submit them to the \emph{Console}; you will not type commands directly into the \emph{Console}.  The \emph{Script Editor} acts as a high-level text editor whereas the \emph{Console} is the actual R program.

\begin{figure}[htbp]
  \centering
    \includegraphics[width=6.2in]{Figs/RStudio_Layout.png}
    \caption{Example of the RStudio layout with the \emph{Script Editor} in the upper-left panel, \emph{Console} in the lower-right panel, the \emph{Workspace} tab shown in the upper-right panel, and the \emph{Plot} tab shown in the lower-right panel.}
  \label{fig:RStudioLayout}
\end{figure}

The upper-right panel contains two tabs -- \emph{Environment} and \emph{History}.  Items listed under the \emph{Environment} tab can be double-clicked to open them for viewing as a tab in the \emph{Script Editor}.  The \emph{History} tab shows all the commands that have been submitted to the \emph{Console} during the current session.

The lower-right panel contains five tabs -- \emph{Files}, \emph{Plots}, \emph{Packages}, \emph{Help}, and \emph{Viewer}.  The \emph{Files} tab shows the files in the current directory.  The \emph{Viewer} will not be used during this course.

The \emph{Plots} tab will show the high-level plots produced by commands submitted to the \emph{Console}.  One can cycle through the history of constructed plots with the arrows on the left side of the plot toolbar and plots can be saved to external files using the ``Export'' tab on the plot toolbar \figrefp{fig:RStudioLayout}.

A list of all installed packaged is seen by selecting the \emph{Packages} tab.  Help for each package is obtained by clicking on the name of package.  The help then appears in the \emph{Help} tab.


\subsection{Basic Usage}
Our primary interaction with RStudio is through R scripts written in the \emph{Script Editor}, submitting those scripts to the \emph{Console}, and viewing textual or tabular results in the \emph{Console}, and graphical results in the \emph{Plot} panel.  In this section, I briefly introduce how to construct and run R scripts in RStudio.

A blank script is open in RStudio with the ``New'' icon (\includegraphics[scale=0.8]{Figs/RStudio_NewIcon.png}) or by selecting the \texttt{File} menu, \texttt{New} submenu, and \texttt{R Script} item.  In the ensuing tab of the \emph{Script Editor}, type the three lines exactly as shown below\footnote{For the moment, don't worry about what these lines ``do.''}.

<<eval=FALSE,tidy=FALSE>>=
dat <- rnorm(100)    # create random normal data (n=100)
hist(dat,main="")    # histogram of data without a title
summary(dat)         # summary statistics
@

These commands must submitted to the \emph{Console} to perform the requested calculations.   Commands are submitted in a variety of ways:

\begin{itemize}
  \item Put the cursor on the first line in the \emph{Script Editor} and press the ``run'' icon (\includegraphics[scale=0.8]{Figs/RStudio_RunIcon.png}).  This will submit the first line to the \emph{Console} and move the cursor to the second line in the \emph{Script Editor}.  Pressing the ``Run'' icon will now submit the second line.  And so on.
  \item Select the ``down arrow'' on the ``Source'' icon (\includegraphics[scale=0.8]{Figs/RStudio_SourceIcon.png}) and select \texttt{Source with Echo} (alternatively, press \verb+<CTRL>+ + \verb+<Shift>+ + \verb+<Enter>+).  This will simultaneously submit all commands to the \emph{Console}.
  \item Select all commands in the \emph{Script Editor} that you wish to submit and then press the ``run'' icon.
\end{itemize}

The RStudio layout after using the first method is shown in \figref{fig:RStudioLayout}.

The R Script in the \emph{Script Editor} should now be saved by selecting the \texttt{File} menu and the \texttt{Save} item (alternatively, pressing \verb+<CTRL>+ + \verb+S+).  RStudio can now be closed (do NOT save the workspace) and re-opened.  The script can then be re-opened (choose the \texttt{File} menu and the \texttt{Open file ...} submenu if the file is not already in the \emph{Script Editor}) and re-submitted to the \emph{Console} to exactly repeat the analyses\footnote{Note that the results of commands are not saved in R or RStudio; rather the commands are saved and re-submitted to re-perform the analysis.}.

\warn{Do not save and restore the workspace in R.}

\vspace{-12pt}
\warn{In most cases it is best to press the ``esc'' key in the R Console if a ``plus sign'' (\textbf{+}) prompt appears.}

Results are copied from the RStudio console and plot windows and pasted into document software (e.g., MSWord) to create a report of your analysis.  The tabular results are copied as expected from the R console but when they are pasted into MSWord they will be contained within a grey background, which is annoying.  To paste without the grey background, choose to paste unformatted text (found by right-clicking in the MSWord document and choosing one of the unformatted options).  Plots are not copied from the plot window; rather they are exported by selecting the ``Export'' button in the Plots window and then the ``Copy Plot to Clipboard''  option.  This will open the window shown in \figref{fig:RStudioCopyGraph}.  In this window, select ``Metafile'' and then ``Copy Plot.''  The plot can then be pasted into MSWord as usual.

\begin{figure}[htbp]
  \centering
    \includegraphics[width=3in]{Figs/RStudio_CopyGraph.png}
    \caption{Example of the RStudio ``Copy Plot to Clipboard'' window.}
  \label{fig:RStudioCopyGraph}
\end{figure}

\section{Working With R Basics} \label{sect:RBasics}
\subsection{Saving Results} \label{sect:RSaving}
Results are not saved in R or RStudio.  Rather, one should save the ``script'' of successful R commands and, then, if the analysis needs to be re-done, the entire set of commands can be opened in RStudio and run again.  When writing a report, all tabular and graphical output should be copied from RStudio and pasted into your report document.  This document will serve as your analysis report and can be modified to include answers to questions, references to the tables and graphs, etc.  Specifics for how this report should be prepared are discussed in \sectref{sect:ReportWriting}.  All data that is not a simple vector (see \sectref{sect:RInfoStorage}) should be entered into R through text files (see \sectref{sect:REnterData}).  With this method, the data will only need to be typed once.

R does allow one to save a ``workspace.''  I strongly urge you to follow the three suggestions of the previous paragraph rather than saving the workspace.  Saving the workspace ``brings back'' objects that a student has either forgotten about, contain incorrect information, or otherwise clutter the work area.  Saving a workspace appears to cause trouble for most students.  Save your ``good'' commands in a script and save your ``good'' results in a report document; do not save the workspace.

\subsection{Expressions and Assignments} \label{sect:RExprAssn}
Expressions in R are mathematical ``equations'' that are evaluated by R with a result seen immediately.  An example of an expression in R is
<<>>=
5+log(7)-pi
@

where \R{log()} and \R{pi} are built-in functions used to compute the natural log and find the value of $\pi$, respectively.  Expressions in R are like using a calculator where the result is shown on the console but it is not saved for any subsequent analyses.  In addition, expressions in R follow the same general rules as expressions entered into your calculator -- i.e., same order of operations and use of parentheses.

\warn{The results of expressions in R are temporary unless the result is assigned to an object.}

Typically you will want to save a computation for further computations.  This ``saving'' is accomplished by assigning the results of an expression to an object in R.  The results of an expression is assigned to an object with the assignment operator (i.e., \R{<-}).  The general form for saving the result of an expression into an object is \R{object <- expression}.  The result of the expression will not be seen unless the object name is subsequently typed into R (but see below).  For example, the result of the previous expression is saved into an object called \var{x} and then viewed with
<<>>=
x <- 5+log(7)-pi
x
@
Many times one wants to also see the result of an expression immediately after it has been saved to an object.  As shown above, one can simply type the name of the object.  However, a short-cut for both assigning and printing the result of an expression is to surround the entire command in parentheses.  For example, the following both assigns the result of the expression to \var{y} and prints the result\footnote{Note that the spaces after the opening parentheses and before the closing parentheses are not needed.  However, they make the code more legible.},
<<>>=
( y <- 15*exp(2) )
# note that the next line is now not needed
y
@

\warn{The convention of surrounding commands in parentheses to both assign and print the results will be used extensively in this book to save space.}

As a general rule, you should assign your computations to an object so that the result can be easily retrieved later\footnote{Note, however, that each assignment uses computer memory.  Thus, if you know for sure that you will not need the result for later use, then do not assign it to an object.  Memory can also be made available by removing objects that are known to no longer be of use.  Objects are removed from R with \R{rm(objectname)}.  A list of current objects is obtained with \R{ls()} and all objects are removed with the \R{Menu..Remove All Objects} menu item.}.  The name of the object can generally be whatever you want with the exception that it cannot start with a number, contain a space, or be the name of a reserved word or function in R (e.g., \R{pi} or \R{log}).  Furthermore, you should keep object names short and simple enough that you can remember what is contained in the object.  It is also good practice to type the name of the object immediately after making the assignment to make sure that it (1) contains results and (2) contains results that seem appropriate.

\warn{In general, computational results should be assigned to an object.}

\vspace{-12pt}
\warn{Type the name of the object after making the assignment to confirm the results.}

\begin{exsection}
  \item \label{revex:BasicsExpr1} \rhw{} Compute the value of $\frac{3}{7}+\frac{1}{2}$. \ansref{ans:BasicsExpr1}
  \item \label{revex:BasicsExpr2} \rhw{} Compute the value of $\pi*3.7^{2}$. \ansref{ans:BasicsExpr2}
  \item \label{revex:BasicsExpr3} \rhw{} Assign the value of 3.7 to \var{r}. \ansref{ans:BasicsExpr3}
  \item \label{revex:BasicsExpr4} \rhw{} Compute the value of $\pi r^{2}$ using the value of \var{r} assigned in the previous problem. \ansref{ans:BasicsExpr4}
  \item \label{revex:BasicsExpr5} \rhw{} \hspace{18pt} Assign the value 1.2 to \var{r} and then re-evaluate $\pi r^{2}$. \ansref{ans:BasicsExpr5}
\end{exsection}


\subsection{Functions and Arguments}  \label{sect:RFunctions}
R contains many ``programs'', or functions, used to perform particular tasks.  A function is ``called'' by typing the function name followed by open and closed parentheses.  Arguments sent to the function, which the function will use to perform its task, are contained within the parentheses.  The \R{log()} function, used in the previous section, is an example of a function.  The name of the function is \R{log} and the argument, the number for which to compute the natural log, is contained within the parentheses following the function name.  The performance of many other functions will be described below and in subsequent chapters.

\defn{Function}{An R program that performs a particular task.}

\vspace{-12pt}
\defn{Argument}{A ``directive'' that is provided to a function.  Arguments are contained within parentheses that follow the function name.}

\vspace{-12pt}
\warn{Regular curved parentheses have two primary uses in R: (1) to control order of operations in expressions (as with a calculator) and (2) to contain the arguments sent to a function.}


\section{Information/Data Storage}
\subsection{Data Types}  \label{sect:RDataTypes}
R can handle a wide variety of data types.  These types are as follows:
\begin{Enumerate}
  \item \textbf{int}: Integer.
  \item \textbf{num}: Non-integer numeric.
  \item \textbf{chr}: Character.
  \item \textbf{factor}: Factor (special form of character).
  \item \textbf{logi}: Logical (i.e., \R{TRUE} and \R{FALSE}).
\end{Enumerate}
The data type of an object is identified by including the object name in \R{str()}\footnote{Note that \R{str} comes from the word ``structure.''}.  The use of \R{str()} to identify types of data is illustrated with
<<>>=
x <- 5+log(7)-pi
str(x)
prof <- "Derek"
str(prof)
@

In addition, there is a special type of variable called a \textbf{factor} consisting of either integers or characters that identify specific groupings\index{Factor!Variable in R}.  In other words, if the data identifies which group an individual belongs to, then the data should be identified as a factor so that R knows that this data is a grouping variable.  For example, suppose that the numeric vector \var{group} contains a ``0'' if the individual is a male and a ``1'' if the individual is a female.  R will treat these ``codes'' as numbers unless it is explicitly told to treat them as codes.  In the example below, \R{factor()} is used to create the new vector \var{fgroup} which explicitly tells R to consider these numbers as codes.
<<>>=
group <- c(0,0,1,1,0,1,1)
str(group)
fgroup <- factor(group)
str(fgroup)
@

\defn{Factor}{A special type of variable that identifies the group to which an individual belongs.}

\vspace{-12pt}
\warn{A character or integer vector that is designed to identify to which group an individual belongs should be converted to a group factor variable with the \R{factor()} function.}


\subsection{Information Storage}  \label{sect:RInfoStorage}
R uses four object types for storing information.  These four object types can be categorized by their general shape (or number of dimensions) and restrictions on the type of data that each can contain \tabrefp{tab:InfoStoreObjects}.  The vector and data frame types will be used almost exclusively in this book.

\begin{table}[htbp]
  \centering
  \caption{Information storage objects in R categorized by dimensions of the object and the data types possible in the object.}\label{tab:InfoStoreObjects}
  \begin{tabular}{c||c|c|}
    \multicolumn{1}{c}{} & \multicolumn{2}{c}{\widen{-1}{6}{Dimensions}} \\
    \cline{2-3}
    \widen{-1}{6}{Data Types} & One & Multi \\
    \hline\hline
    \multicolumn{1}{|c||}{\widen{-1}{6}{One}} & Vector & Matrix \\
    \hline
    \multicolumn{1}{|c||}{\widen{-1}{6}{Mixed}} & List & Data Frame \\
    \hline
  \end{tabular}
\end{table}

The primary information storage object in R is the \emph{vector}.  A vector consists of a one-dimensional list of items of the same data type (e.g., all numeric, all character, etc.).  A vector may be viewed as a row-vector where the series of items are listed in one row across many columns or a column-vector where the series of items are listed in one column across many rows.

\defn{Vector}{A one-dimensional list of items of the same data type.  The primary information storage unit in R.}

Data are entered into a simple vector with the \R{c(x,x,$\ldots$)} function\footnote{Note that \R{c} comes from the word ``concatenate.''} where \R{x} are specific numbers, characters, or logical values.  For example, the following concatenates the numbers 1, 2, and 5 into a vector object called \var{v},
<<>>=
( v <- c(1,2,5) )
@

The ``values'' for a character variable must be contained within paired quotations when entered into a vector.  For example,
<<>>=
( y <- c("Iowa","Minnesota","Wisconsin") )
@

Each item in a vector is accessed by supplying the single number position of that item within square brackets following the name of the vector.  For example, the third item in the \var{v} vector is found with
<<>>=
v[3]
@

\warn{The value of an item within a vector is found by including the position of the item in square brackets immediately after the name of the vector.}

\vspace{-12pt}
\warn{Identifying the position of an item in an object is the ONLY time that square brackets are used in R.}

A \emph{data frame} is a two-dimensional object of potentially different data types.  In a data frame the columns correspond to variables and the rows correspond to individuals.  For simplicity, a data frame can be thought of as a ``spreadsheet'' that contains several variables (columns) recorded on many individuals (rows).

\defn{Data Frame}{A two-dimensional organization of variables (as columns) recorded on multiple individuals (as rows) where the columns may be of different data types.}

\vspace{-12pt}
\warn{A data frame may have columns of different data types (e.g., numeric and character) whereas a vector must have columns all of the same data type.}

\vspace{-12pt}
\warn{The columns of a data frame correspond to variables and the rows of a data frame correspond to individuals.}

A data frame is constructed from separate vectors with \R{data.frame()}\footnote{Note, however, that it is generally much more efficient to read data from an external text file into a data frame (see \sectref{sect:REnterData}).}.  The arguments to \R{data.frame()} are the vectors to be combined column-wise into the data frame.  An example of creating a simple data frame, called \var{fish}, from vectors is
<<>>=
len <- c(45,56,67)
sex <- c("M","M","F")
dead <- c(TRUE,FALSE,FALSE)
( fish <- data.frame(len,sex,dead) )
@

\warn{Data is most often entered into a data frame through an external file rather than through \R{data.frame()}.}

Each column of a data frame corresponds to a vector representing a single variable.  A particular variable is accessed by typing the data frame name, followed by a dollar sign, followed by the name of the variable (i.e., \R{data.frame\$variable}).  In other words, the \var{len} variable in the \var{fish} data frame is specifically accessed with \R{fish\$len}.  As the result of this command is a simple vector, the measurement of \var{len} on the third individual is accessed with \R{fish\$len[3]}.  These commands are illustrated with
<<>>=
fish$len
fish$len[3]
@

\warn{The columns of a data frame are accessed with the name of the data frame, a dollar sign, and then the name of the variable -- i.e., generically, \R{dataframe\$varname}.}

\vspace{-12pt}
\warn{A dollar sign is ONLY used in R to separate the name of a data frame from the name of a variable within that data frame.}

\begin{exsection}
  \item \label{revex:BasicsData1}\rhw{} Create a vector called \var{h} that contains nine heights of people. \ansref{ans:BasicsData1}
  \item \label{revex:BasicsData2}\rhw{} Create a vector called \var{w} that contains nine weights of people. \ansref{ans:BasicsData2}
  \item \label{revex:BasicsData3}\rhw{} Create a vector called \var{hc} that contains nine hair colors of people. \ansref{ans:BasicsData3}
  \item \label{revex:BasicsData4}\rhw{} Create a vector called \var{m} that contains nine logical values (=\R{TRUE} if male). \ansref{ans:BasicsData4}
  \item \label{revex:BasicsData5}\rhw{} Using the vectors from the previous questions,  \ansref{ans:BasicsData5}
  \begin{Enumerate}
    \item ... create the largest possible data frame (use \R{data.frame()}).
    \item ... identify the height of the third individual of this data frame.
    \item ... identify the hair color for the sixth individual of this data frame.
  \end{Enumerate}
\end{exsection}

\subsection{Entering Data}  \label{sect:REnterData}
For data that consists of data for several variables recorded from many individuals it is most efficient to enter the data into an external spreadsheet or database program, export the data from that program to a tab-delimited text file, and then import that file into R.  While this may sound cumbersome, it is a very efficient way to store data as most data, for realistic size situations, has already been entered into a spreadsheet or database program.  In the following paragraphs, I demonstrate how to enter data regarding lady bugs into Microsoft Excel, how to export that data to a tab-delimited text file, and then how to import that file into R.

The Excel file should be organized with variable names in the first row and the recorded data in rows below that.  In this example, the variable name \var{len} is entered into the first cell of the first row and the seven length measurements are listed in the cells of the next seven rows as illustrated below.
\begin{center}
  \includegraphics[width=1.5in]{Figs/Data_File_1.jpg}
\end{center}

The variable names must NOT contain any spaces.  For example use \var{len} rather than \var{total length} or \var{length (mm)}.  If you feel the need to have longer variable names, then separate the parts with a period -- e.g., \var{total.length} or an underscore \var{total\_length}.  In addition, note that numerical measurements should NOT include units -- e.g., don't use \verb"7 mm".  Finally, when using categorical data to denote group memberships make sure that all category labels are consistent.  For example, do not have a column with both \verb"male" and \verb"Male".

\warn{Variable names and data should not contain spaces.  The \R{Error in scan} error message usually indicates that you have spaces in the variable names or data.}

The Excel file should be saved in its native Excel format (the usual  \verb"File..Save" menu items) and as a tab-delimited text file.  The tab-delimited text file is created by selecting the \verb"File..Save As" menu item which produces the following dialog box.
\begin{center}
  \includegraphics[width=5.5in]{Figs/Data_File_2.jpg}
\end{center}

In this dialog box change \verb"Save as type" to \verb"Text (Tab delimited) (*.txt)" (you may have to scroll down), provide a file name, select a location to save the file (and don't forget this location!!), and press \verb"OK".  Two ``warning'' dialog boxes will then appear -- select \verb"OK" on the first and \verb"YES" on the second.  A text file will now be created with the name and in the folder you provided.  You can now close the Excel file (you will likely be asked to save changes -- you should say \verb"No").

The R working directory must be set to the directory where the the tab-delimited text file was saved before it can be read into R.  The simplest method for setting the working directory is to save an RStudio script file in the same directory as the data file.  If you do this, then you can choose the \verb"Session", \verb"Set Working Directory ...", \verb"To Source File Location" menu items in RStudio which will send an appropriate \R{setwd()} command to the R console.  This command should then be copied from the R console to your RStudio script for future use\footnote{Doing this will eliminate the need to manually select the menu options every time you want to run this script.}.

Regardless of which method you use, the result is a \R{setwd()} command that has the path to the directory containing the data as the argument.  For example, I stored the lady bug data file in the \verb"C:/data" directory.  Thus, the method of the previous paragraph would result in the following command which I then copied to my script file.

<<eval=FALSE>>=
setwd("C:/data/")
@

The tab-delimited data file is read into R with \R{read.table()}.  This function requires the filename in quotes as the first argument.  In addition, the \R{header=TRUE} argument is included to indicate that the data file contains a header row of variable names.  Thus, the tab-delimited data file of lady bug data is read into R and stored in a data frame called \var{LB} with
<<eval=FALSE>>=
LB <- read.table("ladybug.txt",header=TRUE)
@

\warn{Data stored in a tab-delimited external text file is read into R with \R{read.table()}.}

It is important that each row of the data frame correspond to one individual.  This will become critically important when data is recorded for two different groups (e.g., for a two-sample t-test; see \sectref{sect:t2test}).  For example, consider the following data of methyl mercury levels recorded in mussels from a location labeled as ``impacted'' and a separate location labeled as ``reference'',
\begin{Verbatim}
  impacted   0.011  0.054  0.056  0.095  0.051  0.077
  reference  0.031  0.040  0.029  0.066  0.018  0.042  0.044
\end{Verbatim}
To follow the ``one individual per row'' rule, these data would have to be entered in stacked format where the ``reference'' data are stacked underneath the ``impacted'' data and a column is used to indicate to which groups the individuals belong.  For example, the Excel file for data entry would look like the following

\begin{center}
  \includegraphics[width=1.5in]{Figs/StackedData.jpg}
\end{center}

\subsubsection*{Alternative Forms of Getting Data} \label{sect:RAltData}
Some of the data files that you will use are provided on the \href{https://sites.google.com/site/ncstats/data}{R Data} page of the class webpage.  In these cases, the data should be downloaded from the webpage and saved in the same directory or folder as your analysis script.  The downloaded file is then read into R in the same manner as described previously (i.e., set the working direcotry with \R{setwd()} and then use \R{read.table()}).  All data files on the webpage will include a header; thus, you will always need \R{header=TRUE}.

\warn{Every data file provided with this book contains a header and, thus, \R{header=TRUE} must be used in \R{read.table()}.}

A few data files used in this book are supplied with R or the NCStats package.  These files are installed but need to be loaded with \R{data()}.  For example, the \dfile{iris} data file is loaded into R with
<<>>=
data(iris)
@

\section{Working With Data Frames}  \label{sect:RWorkdf}
\subsection{Viewing a Data Frame}  \label{sect:RViewdf}
Many users are disoriented in R because they cannot ``see'' their data in the same way that they see it in a spreadsheet program.  There are, however, several options for viewing your data in R.  First, you can type the name of the data frame object to see the entire contents of the data frame.  This is adequate for small data frames,
<<>>=
fish
@
but not so useful for large data frames.  The entire data frame is opened in a separate window by double-clicking on the name of the data frame in the \R{Workspace} tab of RStudio.  Portions of a data frame are viewed by including the data frame object in \R{view()}.  For example, a random\footnote{The first and last six rows are viewed with \R{head()} and \R{tail()}, respectively.} six rows are viewed with
<<>>=
view(iris)
@

In addition to viewing the contents of the data frame, it is often useful to examine the structure of the data frame returned from \R{str()}.  For example, the structure of the \dfile{iris} data frame is obtained with
<<>>=
str(iris)
@
From this it is seen that \Sexpr{kCounts(ncol(iris))} variables were recorded on \Sexpr{nrow(iris)} individuals.  The first four variables -- called \var{\Sexpr{names(iris)[1]}}, \var{\Sexpr{names(iris)[2]}}, \var{\Sexpr{names(iris)[3]}}, and \var{\Sexpr{names(iris)[4]}} -- are various numerical measurements of sepal and petals.  The last variable -- called \var{\Sexpr{names(iris)[5]}} -- is a factor variable that records the species of iris examined.  The levels in the \var{\Sexpr{names(iris)[5]}} variable are seen by including this variable (must also include the data frame name) as the argument to \R{levels()},
<<>>=
levels(iris$Species)
@

\vspace{-12pt}
\subsection{Subsetting a Data Frame}  \label{sect:RSubsetdf}
\vspace{-12pt}
It is common to create a new data frame that contains only some of the individuals from an existing data frame.  For example, a researcher may want to extract only the data for the \emph{setosa} species or those irises with sepal lengths greater than 5 cm from the \var{iris} data frame.  The process of creating the newer, smaller data frame is called subsetting and is accomplished with \R{Subset()}.  The \R{Subset()} function requires the original data frame as the first argument and a conditioning statement as the second argument.  The conditioning statement is a statement that is used to either include or exclude the individuals from the original data frame that will make up the new data frame.  The result from \R{Subset()} should be assigned an object which will then be the name of the new data frame.

\warn{The \R{Subset()} function is used to create a new data frame that consists of individuals selected by some criterion from an existing data frame.}

The conditioning statements used in \R{Subset()} can be fairly complex.  However, in this book, the conditioning statements will usually consist of the name of a variable in the original data frame, a comparison operator, and a comparison value.  Some common comparison operators are shown in \tabrefp{tab:RSubsetConditions}.

\begin{table}[htbp]
  \caption{Condition operators used in \R{Subset()} and their results.  Note that \emph{variable} generically represents a variable in the original data frame and \emph{value} is a generic value or level.  Both of these would be replaced with specific items.}  \label{tab:RSubsetConditions}
  \centering
\begin{tabular}{cc}
\hline\hline
Comparison &  \\
Operator &  Individuals Returned from Original Data Frame \\
\hline
\widen{-1}{6}{\emph{variable}} $==$ \emph{value} & all individual that are \textbf{equal} to the given value \\
\widen{-1}{5}{\emph{variable}} $!=$ \emph{value} & all individuals that are \textbf{NOT equal} to the given value \\
\widen{-1}{5}{\emph{variable}} $>$ \emph{value} & all individuals that are \textbf{greater than} the given value \\
\widen{-1}{5}{\emph{variable}} $>=$ \emph{value} & all individuals that are \textbf{greater than or equal} to the given value \\
\widen{-1}{5}{\emph{variable}} $<$ \emph{value} & all individuals that are \textbf{less than} the given value \\
\widen{-1}{5}{\emph{variable}} $<=$ \emph{value} & all individuals that are \textbf{less than or equal} to the given value \\
\widen{-1}{5}{\emph{condition}} \& \emph{condition} & all individuals that \textbf{meet both conditions} \\
\widen{-2}{6}{\emph{condition}} $|$ \emph{condition} & all individuals that \textbf{meet one or both conditions}\footnote{Note that this ``or'' operator is a ``vertical line'' which is typed with the shift-backslash key.} \\
\hline\hline
\end{tabular}
\end{table}

The following items are examples of new data frames created by subsetting the \var{iris} data frame\footnote{The \R{view()} function is used in these examples to show a random selection of rows in the new data frame.}.

\begin{itemize}
  \item A data frame that contains only individuals of the \emph{setosa} species\footnote{Note that in this, and all ensuing examples, that the object name to the left of the assignment operator (i.e., \R{iris.set} in this example) can be nearly any name of the authors choosing.  In other words, this object does not have to be called \R{iris.set}; it could be called nearly anything else.}.
<<>>=
iris.set <- Subset(iris,Species=="setosa")
view(iris.set)
@

  \item A data frame that contains individuals of the \emph{setosa} and \emph{versicolor} species.
<<>>=
iris.setver <- Subset(iris,Species=="setosa" | Species=="versicolor")
view(iris.setver)
@

  \item A data frame that contains individuals with a sepal length greater than 5 cm.
<<>>=
iris.gt5 <- Subset(iris,Sepal.Length>5)
view(iris.gt5)
@

  \item A data frame that contains individuals of the \emph{setosa} species with a sepal length greater than 5 cm.
<<>>=
iris.setgt5 <- Subset(iris,Species=="setosa" & Sepal.Length>5)
view(iris.setgt5)
@
\end{itemize}

Note that after each subsetting you should either view or examine the structure of the new data frame to determine if the data frame actually contains the items that you desire.

\warn{View or ``structure'' the data frame created from using \R{Subset()} to assure that it contains data.}

\begin{exsection}
  \item \label{revex:BasicsDataFrame1} \rhw{} Two students at Seattle Community College made biometric measurements on 25 Douglas fir (\emph{Pseudotsuga menziesii}) trees in the lowlands of western Washington.  The variables recorded in the \href{https://sites.google.com/site/ncstats/data/DougFirBiometrics.txt}{DougFirBiometrics.txt} file are a unique tree identifier (\var{tree}), the observer's name (\var{observer}; either ``Ingrid'' or ``Dylan''), the circumference at breast height (meters; \var{circ}), the height to the eye of the observer (meters; \var{eyeht}), the horizontal distance between observer and tree (meters; \var{horizdist}), the angle between observer and top of tree (degrees; \var{angle}), and the estimated height of tree (meters; \var{height}) using right-angle trigonometry. \ansref{ans:BasicsDataFrame1}
  \begin{Enumerate}
    \item Read this data file into an object called \R{DF}.
    \item Examine the structure of this data frame.
    \item Show all measurements made on the third tree. [Do not do this manually; use commands to find the results.]
    \item Show all estimated tree heights.
    \item Show the estimated tree height for the fifth tree.
    \item Show all measurements for all trees measured by ``Ingrid''.  [HINT: use subsetting.]
    \item Show all estimated tree heights for all trees measured by ``Dylan''.  [HINT: use subsetting.]
    \item Show all measurements for tree heights less than 10 m.  [HINT: use subsetting.]
    \item Show all measurements for tree heights greater than 10 m and circumference less than 1 m.  [HINT: use subsetting.]
  \end{Enumerate}
\end{exsection}

\newpage
\begin{hwsection}{All questions below should be typed and answered following the expectations identified in \sectref{sect:ReportWriting}.  All work must be shown.  Questions marked with the R logo must include R output with your R commands in an attached appendix.}

  \item \label{hwprob:RBasicsPL1} \rhw{} The data below are the number of purple loosestrife (\textit{Lythrum salicaria}) plants found in each of 19 randomly selected plots in the Green Gables Creek Slough.

    \begin{Verbatim}[xleftmargin=5mm]
13, 2, 1, 0, 9, 11, 5, 5, 14, 23, 0, 2, 3, 3, 6, 7, 4, 16, 1
    \end{Verbatim}

In addition, the researchers also recorded a qualitative measure of the shadiness of the plot.  The three levels of ``shadiness'' (along with abbreviations) used were ``completely shaded'' (S), ``partially shaded'' (P), and ``completely open'' (O).  The data below are the shadiness levels of the same 19 plots in the same order as the number of loosestrife plants shown above,

    \begin{Verbatim}[xleftmargin=5mm]
O,S,S,S,O,O,S,P,O,O,S,S,P,P,P,P,S,O,S
    \end{Verbatim}

Enter these data into an Excel file with columns labeled as \var{lstrf} and \var{shade}.  Save this file as a tab-delimited text file and read that file into an object called \R{df} in R.  Use this to answer the questions below using R commands (i.e., don't re-type the data).

  \begin{Enumerate}
    \item List the number of purple loosestrife plants and shadiness category for the 10th plot.
    \item List the number of purple loosestrife plants in each plot.
    \item List the data for all\footnote{Don't use \R{view()} when asked to show all individuals, as \R{view()} only shows a random six individuals.} of the completely shaded plots.
    \item List the data for all of the open plots.
    \item List the data for all of the completely open or partially shaded plots (use only one command in R).
    \item List the data for all plots with more than 10 purple loosestrife plants.
    \item List the data for all plots with less than 5 purple loosestrife plants and that are completely shaded (use only one command in R).
  \end{Enumerate}
\end{hwsection}
